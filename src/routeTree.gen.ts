/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OurTeamImport } from './routes/our-team'
import { Route as FaqImport } from './routes/faq'
import { Route as ContactImport } from './routes/contact'
import { Route as IndexImport } from './routes/index'
import { Route as DemoTanstackQueryImport } from './routes/demo.tanstack-query'
import { Route as DemoTableImport } from './routes/demo.table'

// Create Virtual Routes

const OurClientsLazyImport = createFileRoute('/our-clients')()

// Create/Update Routes

const OurClientsLazyRoute = OurClientsLazyImport.update({
  id: '/our-clients',
  path: '/our-clients',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/our-clients.lazy').then((d) => d.Route))

const OurTeamRoute = OurTeamImport.update({
  id: '/our-team',
  path: '/our-team',
  getParentRoute: () => rootRoute,
} as any)

const FaqRoute = FaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DemoTanstackQueryRoute = DemoTanstackQueryImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRoute,
} as any)

const DemoTableRoute = DemoTableImport.update({
  id: '/demo/table',
  path: '/demo/table',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqImport
      parentRoute: typeof rootRoute
    }
    '/our-team': {
      id: '/our-team'
      path: '/our-team'
      fullPath: '/our-team'
      preLoaderRoute: typeof OurTeamImport
      parentRoute: typeof rootRoute
    }
    '/our-clients': {
      id: '/our-clients'
      path: '/our-clients'
      fullPath: '/our-clients'
      preLoaderRoute: typeof OurClientsLazyImport
      parentRoute: typeof rootRoute
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/demo/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableImport
      parentRoute: typeof rootRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/our-team': typeof OurTeamRoute
  '/our-clients': typeof OurClientsLazyRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/our-team': typeof OurTeamRoute
  '/our-clients': typeof OurClientsLazyRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/contact': typeof ContactRoute
  '/faq': typeof FaqRoute
  '/our-team': typeof OurTeamRoute
  '/our-clients': typeof OurClientsLazyRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contact'
    | '/faq'
    | '/our-team'
    | '/our-clients'
    | '/demo/table'
    | '/demo/tanstack-query'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contact'
    | '/faq'
    | '/our-team'
    | '/our-clients'
    | '/demo/table'
    | '/demo/tanstack-query'
  id:
    | '__root__'
    | '/'
    | '/contact'
    | '/faq'
    | '/our-team'
    | '/our-clients'
    | '/demo/table'
    | '/demo/tanstack-query'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactRoute: typeof ContactRoute
  FaqRoute: typeof FaqRoute
  OurTeamRoute: typeof OurTeamRoute
  OurClientsLazyRoute: typeof OurClientsLazyRoute
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactRoute: ContactRoute,
  FaqRoute: FaqRoute,
  OurTeamRoute: OurTeamRoute,
  OurClientsLazyRoute: OurClientsLazyRoute,
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/contact",
        "/faq",
        "/our-team",
        "/our-clients",
        "/demo/table",
        "/demo/tanstack-query"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/faq": {
      "filePath": "faq.tsx"
    },
    "/our-team": {
      "filePath": "our-team.tsx"
    },
    "/our-clients": {
      "filePath": "our-clients.lazy.jsx"
    },
    "/demo/table": {
      "filePath": "demo.table.tsx"
    },
    "/demo/tanstack-query": {
      "filePath": "demo.tanstack-query.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
